compile:
gcc -O3 -Wall -g long_message_attack.c sha256.c dict.c util/util_char_arrays.c util/memory.c -lm -o long_message_attack


cost statistics:
sudo perf stat -o stats.txt -a -r 2 -e power/energy-pkg/ ./long_message_attack 30 15


sudo perf stat -a -r 2 -e power/energy-pkg/ ./long_message_attack 30 15

usage:
./longa_message_attack n l
n: 0<n<257 which is the number of bits in the output of the compression function
l:float 2^l is the number of blocks

- the two messages, that collide, will be saved in the files `message1` `message2`


files:
- statistics/{n}bits.txt files contain the system power usage while the program was running.
- long_message_attack.c: main file that implements the attack
- dict.*: chained dictionary implementation using linked list
- util_char_arrays.* : some useful functionalities
- ignore the tmp file



taken from the internet: 
- sha256.* (modified)
- crypto-algorithms-master.zip

questions:
- what are the objects that needed to be free?

issues:
- too many malloc calls for the random_byte, it should only fills the buffer not malloc
- when there is a duplicate in the dictionary the program stops instead of writing the index of cycle
  this has to be updated
- creating two dictionaries d1 and d2 (in order), then d2 will have keys and values from d1!
  however is_occupied seems to be correct.
- with the code of linear probing, the collision always happends at index 0!
- Duplicate keys would create two entries! fix that.
-- If there is a duplicate then we found a cylce that leads to collision.
-- This can be solved using a global variable: cycle_found, with minimal changes to the attack 



future improvements:
- optional printing if a flag has been passed
- truncation and representing n-bits digest can be done more elegantly
  using the introduced union digest.
- fix naming convention n_of_blocks or nblocks?
- should dictionary deals with key_size as bits?
- no need to store the long message
- 

possible optimizations:
- all arrays has to be contagious
- arrays instead of linked list
- profile the code

